/*
 * This file is generated by jOOQ.
 */
package com.libertest.generatedsources.entity.tables;


import com.libertest.generatedsources.entity.DefaultSchema;
import com.libertest.generatedsources.entity.Indexes;
import com.libertest.generatedsources.entity.Keys;
import com.libertest.generatedsources.entity.tables.records.ReceitasRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Receitas extends TableImpl<ReceitasRecord> {

    private static final long serialVersionUID = 720289678;

    /**
     * The reference instance of <code>receitas</code>
     */
    public static final Receitas RECEITAS = new Receitas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReceitasRecord> getRecordType() {
        return ReceitasRecord.class;
    }

    /**
     * The column <code>receitas.NOME</code>.
     */
    public final TableField<ReceitasRecord, String> NOME = createField("NOME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>receitas.MODO_DE_PREPARO</code>.
     */
    public final TableField<ReceitasRecord, String> MODO_DE_PREPARO = createField("MODO_DE_PREPARO", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>receitas</code> table reference
     */
    public Receitas() {
        this(DSL.name("receitas"), null);
    }

    /**
     * Create an aliased <code>receitas</code> table reference
     */
    public Receitas(String alias) {
        this(DSL.name(alias), RECEITAS);
    }

    /**
     * Create an aliased <code>receitas</code> table reference
     */
    public Receitas(Name alias) {
        this(alias, RECEITAS);
    }

    private Receitas(Name alias, Table<ReceitasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Receitas(Name alias, Table<ReceitasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Receitas(Table<O> child, ForeignKey<O, ReceitasRecord> key) {
        super(child, key, RECEITAS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECEITAS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ReceitasRecord> getPrimaryKey() {
        return Keys.KEY_RECEITAS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ReceitasRecord>> getKeys() {
        return Arrays.<UniqueKey<ReceitasRecord>>asList(Keys.KEY_RECEITAS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Receitas as(String alias) {
        return new Receitas(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Receitas as(Name alias) {
        return new Receitas(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Receitas rename(String name) {
        return new Receitas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Receitas rename(Name name) {
        return new Receitas(name, null);
    }
}
